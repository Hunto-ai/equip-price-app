import React, { useState } from 'react';
import {
  Paper,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Grid,
} from '@mui/material';
import { useEquipment } from '../contexts/EquipmentContext';

const PricingCalculator = () => {
  const {
    equipmentList,
    removeEquipment,
    updateEquipment,
    addEquipment,
    calculateItemPrice,
    calculateTotalPrice,
    getEquipmentByType,
  } = useEquipment();

  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [currentItem, setCurrentItem] = useState(null);
  const [editedItem, setEditedItem] = useState(null);

  // Group equipment by type
  const groupedEquipment = getEquipmentByType();
  
  // Format currency
  const formatCurrency = (amount) => {
    return amount.toLocaleString('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    });
  };

  // Handle edit button click
  const handleEditClick = (item) => {
    setCurrentItem(item);
    setEditedItem({ ...item });
    setEditDialogOpen(true);
  };

  // Handle duplicate button click
  const handleDuplicateClick = (item) => {
    const duplicatedItem = {
      ...item,
      id: undefined, // Will be generated by addEquipment
    };
    addEquipment(duplicatedItem);
  };

  // Handle delete button click
  const handleDeleteClick = (id) => {
    removeEquipment(id);
  };

  // Handle save edit
  const handleSaveEdit = () => {
    if (editedItem) {
      updateEquipment(editedItem);
      setEditDialogOpen(false);
      setCurrentItem(null);
      setEditedItem(null);
    }
  };

  // Handle cancel edit
  const handleCancelEdit = () => {
    setEditDialogOpen(false);
    setCurrentItem(null);
    setEditedItem(null);
  };

  // Handle spec change in edit dialog
  const handleEditSpecChange = (specName, value) => {
    const numValue = parseFloat(value) || 0;
    
    setEditedItem((prev) => ({
      ...prev,
      specs: {
        ...prev.specs,
        [specName]: numValue,
      },
    }));
  };

  // Handle control change in edit dialog
  const handleEditControlChange = (controlType, value) => {
    const numValue = parseInt(value, 10) || 0;
    
    setEditedItem((prev) => ({
      ...prev,
      controls: {
        ...prev.controls,
        [controlType]: numValue,
      },
    }));
  };

  // Handle quantity change in edit dialog
  const handleEditQuantityChange = (value) => {
    const numValue = parseInt(value, 10) || 1;
    
    setEditedItem((prev) => ({
      ...prev,
      quantity: numValue,
    }));
  };

  // Render edit dialog
  const renderEditDialog = () => {
    if (!currentItem || !editedItem) return null;

    return (
      <Dialog open={editDialogOpen} onClose={handleCancelEdit} maxWidth="md" fullWidth>
        <DialogTitle>Edit {currentItem.name}</DialogTitle>
        <DialogContent>
          <Grid container spacing={3} sx={{ mt: 1 }}>
            {/* Quantity */}
            <Grid item xs={12} sm={6}>
              <TextField
                fullWidth
                label="Quantity"
                type="number"
                value={editedItem.quantity || 1}
                onChange={(e) => handleEditQuantityChange(e.target.value)}
                inputProps={{ min: 1, step: 1 }}
              />
            </Grid>

            {/* Specs */}
            {Object.entries(editedItem.specs).map(([specName, value]) => (
              <Grid item xs={12} sm={6} key={specName}>
                <TextField
                  fullWidth
                  label={specName.charAt(0).toUpperCase() + specName.slice(1).replace(/([A-Z])/g, ' $1')}
                  type="number"
                  value={value}
                  onChange={(e) => handleEditSpecChange(specName, e.target.value)}
                  inputProps={{ step: specName.includes('price') ? 0.01 : 0.1 }}
                />
              </Grid>
            ))}

            {/* Controls */}
            <Grid item xs={12}>
              <Typography variant="h6">Control Components</Typography>
              <Grid container spacing={2}>
                {Object.entries(editedItem.controls || {}).map(([controlType, value]) => (
                  <Grid item xs={4} sm={2.4} key={controlType}>
                    <TextField
                      fullWidth
                      label={controlType}
                      type="number"
                      value={value}
                      onChange={(e) => handleEditControlChange(controlType, e.target.value)}
                      inputProps={{ min: 0, step: 1 }}
                    />
                  </Grid>
                ))}
              </Grid>
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCancelEdit}>Cancel</Button>
          <Button onClick={handleSaveEdit} variant="contained" color="primary">
            Save
          </Button>
        </DialogActions>
      </Dialog>
    );
  };

  return (
    <Paper elevation={3} sx={{ p: 3, mb: 3 }}>
      <Typography variant="h5" gutterBottom>
        Equipment Pricing Summary
      </Typography>

      {equipmentList.length === 0 ? (
        <Typography variant="body1" sx={{ my: 4, textAlign: 'center' }}>
          No equipment added yet. Use the form above to add equipment.
        </Typography>
      ) : (
        <TableContainer component={Paper} variant="outlined">
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Equipment</TableCell>
                <TableCell>Specifications</TableCell>
                <TableCell align="right">Quantity</TableCell>
                <TableCell align="right">Unit Price</TableCell>
                <TableCell align="right">Total Price</TableCell>
                <TableCell align="center">Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {/* Equipment rows grouped by type */}
              {Object.entries(groupedEquipment).map(([type, items]) => {
                const typeTotal = items.reduce(
                  (sum, item) => sum + calculateItemPrice(item),
                  0
                );

                return (
                  <React.Fragment key={type}>
                    {/* Equipment rows */}
                    {items.map((item) => {
                      const unitPrice = calculateItemPrice(item) / (item.quantity || 1);
                      const totalPrice = calculateItemPrice(item);

                      return (
                        <TableRow key={item.id}>
                          <TableCell>
                            {item.name}
                          </TableCell>
                          <TableCell>
                            {Object.entries(item.specs)
                              .filter(([key]) => !key.startsWith('price'))
                              .map(([key, value]) => (
                                <div key={key}>
                                  {key.charAt(0).toUpperCase() + key.slice(1).replace(/([A-Z])/g, ' $1')}: {value}
                                </div>
                              ))}
                          </TableCell>
                          <TableCell align="right">{item.quantity || 1}</TableCell>
                          <TableCell align="right">{formatCurrency(unitPrice)}</TableCell>
                          <TableCell align="right">{formatCurrency(totalPrice)}</TableCell>
                          <TableCell align="center">
                            <Button
                              size="small"
                              onClick={() => handleEditClick(item)}
                              variant="outlined"
                              sx={{ mr: 1 }}
                            >
                              Edit
                            </Button>
                            <Button
                              size="small"
                              onClick={() => handleDuplicateClick(item)}
                              variant="outlined"
                              sx={{ mr: 1 }}
                            >
                              Copy
                            </Button>
                            <Button
                              size="small"
                              onClick={() => handleDeleteClick(item.id)}
                              variant="outlined"
                              color="error"
                            >
                              Delete
                            </Button>
                          </TableCell>
                        </TableRow>
                      );
                    })}

                    {/* Subtotal row for this type */}
                    <TableRow>
                      <TableCell colSpan={4} align="right" sx={{ fontWeight: 'bold' }}>
                        Subtotal for {items[0].name}:
                      </TableCell>
                      <TableCell align="right" sx={{ fontWeight: 'bold' }}>
                        {formatCurrency(typeTotal)}
                      </TableCell>
                      <TableCell />
                    </TableRow>
                  </React.Fragment>
                );
              })}

              {/* Grand total row */}
              <TableRow>
                <TableCell colSpan={4} align="right" sx={{ fontWeight: 'bold', fontSize: '1.1rem' }}>
                  GRAND TOTAL:
                </TableCell>
                <TableCell align="right" sx={{ fontWeight: 'bold', fontSize: '1.1rem' }}>
                  {formatCurrency(calculateTotalPrice())}
                </TableCell>
                <TableCell />
              </TableRow>
            </TableBody>
          </Table>
        </TableContainer>
      )}

      {renderEditDialog()}
    </Paper>
  );
};

export default PricingCalculator;
